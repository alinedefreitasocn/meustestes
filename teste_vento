"""
Lendo arquivo de vento de guaratiba e gerando figura tipo stickplot ao longo do tempo
"""

import numpy as np
import matplotlib.pyplot as plt
from matplotlib.dates import date2num
from datetime import datetime, timedelta

##################################################################
####               essa Ã© a minha parte
##################################################################


# -*- coding: utf-8 -*-
"""
Created on Fri Jun 19 09:59:45 2015

@author: b9ke
"""

import pandas as pd
import matplotlib
import matplotlib.pyplot as plt
import numpy as np

#xls = load('guaratiba.txt');
#data = xls.parse

vento = loadtxt('guaratiba.txt')
lat = vento[:,1]
lon = vento[:,2]
dia = vento[:,4]
mes = vento[:,5]
ano = vento[:,6]
hr = vento[:,7]
minuto = vento[:,8]
veloc = vento[:,9]
direc = vento[:,10]

#usando  
datahora = np.zeros(len(dia))
ano_int = np.zeros(len(dia))
mes_int = np.zeros(len(dia))
dia_int = np.zeros(len(dia))
hr_int = np.zeros(len(dia))
min_int = np.zeros(len(dia))
    
    
for i in xrange(len(dia)):
    ano_int = int(ano[i])
    mes_int = int(mes[i])
    dia_int = int(dia[i])
    hr_int = int(hr[i])
    min_int = int(minuto[i])
    datahora[i] = datetime.datetime(ano_int[i], mes_int[i], dia_int[i], hr_int[i], min_int[i])
    datahora.strftime("%d-%m-%Y %H:%M)
    
#arq_vento = open('guaratiba.txt', 'r');
#cabecalho = arq_vento.readline();
#vento = arq_vento.readlines();
#arq_vento.close()
#
#linhas = len(vento_guaratiba)
#ID = np.zeros(len(vento), 'f')
#lat = np.zeros(len(vento), 'f')
#lon = np.zeros(len(vento), 'f')
#cota = np.zeros(len(vento), 'f')
#data = np.zeros(len(vento), 's')
#hora = np.zeros(len(vento), 's')
#veloc = np.zeros(len(vento), 'f')
#direc = np.zeros(len(vento), 'f')
#
#
#for i in linhas:
#    split_istr = vento[i].split('\t')
#ID[i] = float(split_istr[0]
#lat[i] = float(split_istr[1]
#lon[i] = float(split_istr[2]
#cota[i] = float(split_istr[3]
#data[i] = str(split_istr[4]
#hora[i] = str(split_istr[5]
#veloc[i] = float(split_istr[6]
#direc[i] = float(split_istr[7]
#    



##################################################################
####               essa foi copiada do site
####   https://ocefpaf.github.io/python4oceanographers/blog/2014/09/15/stick_plot/
###################################################################
x = np.arange(100, 110, 0.1)
start = datetime.now()
time = [start + timedelta(days=n) for n in range(len(x))]
u, v = np.sin(x), np.cos(x)


def stick_plot(time, u, v, **kw):
    width = kw.pop('width', 0.002)
    headwidth = kw.pop('headwidth', 0)
    headlength = kw.pop('headlength', 0)
    headaxislength = kw.pop('headaxislength', 0)
    angles = kw.pop('angles', 'uv')
    ax = kw.pop('ax', None)
    
    if angles != 'uv':
        raise AssertionError("Stickplot angles must be 'uv' so that"
                             "if *U*==*V* the angle of the arrow on"
                             "the plot is 45 degrees CCW from the *x*-axis.")

    time, u, v = map(np.asanyarray, (time, u, v))
    if not ax:
        fig, ax = plt.subplots()
    
    q = ax.quiver(date2num(time), [[0]*len(time)], u, v,
                  angles='uv', width=width, headwidth=headwidth,
                  headlength=headlength, headaxislength=headaxislength,
                  **kw)

    ax.axes.get_yaxis().set_visible(False)
    ax.xaxis_date()
    return q
